import React, { Dispatch, SetStateAction, useState } from 'react';

import { ActionGroup, Button, Checkbox, Grid, GridItem, DatePicker, Form, FormGroup, ValidatedOptions, FormHelperText, FormSelect, FormSelectOption, NumberInput, TextArea, TextInput, Wizard, Radio } from '@patternfly/react-core';
import ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';
import ComponentDetails from './ComponentDetails';

type NumberEntriesProps = {
    editrole: boolean;
    data: any;
    numberE: number;
    onPlus: () => void;
    onChange: (event: any) => void;
    onDataSet: (event: any) => void;
    onMinus: () => void;
    options: any;

};


const NumberEntries = ({ editrole, data, numberE, options, onDataSet, onPlus, onMinus, onChange }: NumberEntriesProps) => {
    const onSetData = (value) => {
        onDataSet(value)
    }
    const [pon, setPon] = useState('');
    const [disableEntry, setDisableEntry] = useState(false);
    
    const dateFormat = date => date.toLocaleDateString();
    const dateParse = date => {
        //const split = date.split('/');
        //if (split.length !== 3) {
        //  return new Date();
        //}
        //let month = split[0];
        //let day = split[1];
        //let year = split[2];
        //console.log(split);
        return date;
        //return new Date(`${day.padStart(2, '0')}-${month.padStart(2, '0')}-${year.padStart(4, '0')}T00:00:00`);
    };

    const ChangeData = (value, key) => {
        var temp = data;
        temp[key] = value;
        onSetData(temp);
    }
    const setponR = (value) => {
        var temp = data;
        temp['pon'] = value;
        setPon(value);
        onSetData(temp);
        console.log(data);
    }
    const setPON = (value) =>{
        if(value === false){
            setDisableEntry(value);
            setponR('');
        }
        else{
            setDisableEntry(value); 
        }
        
    }
    return (
        <Form>
            <Checkbox id="check-9"
                isChecked={disableEntry}
                label="Via Purchase order"
                aria-label="Via Purchase order"
                onChange={(checked)=>setPON(checked)}
                description="Check here if you have a Purchase Order Number" />
            <Grid hasGutter md={6}>
                <GridItem>
                    <FormGroup label="Date" fieldId="horizontal-form-title">
                        <DatePicker
                            value={data.date}
                            placeholder="dd/MM/yyyy"
                            isDisabled={!editrole || disableEntry}
                            onChange={(value) => { ChangeData(value, 'date') }}
                            dateFormat={dateFormat}
                            dateParse={dateParse}
                        />
                    </FormGroup>
                </GridItem>
                <GridItem>
                    <FormGroup label="Bill No" fieldId="horizontal-form-title" helperText="AutoGenerated Bill No">
                        <TextInput
                            value={data.billno}
                            isRequired
                            isDisabled={!editrole || disableEntry}
                            type="text"
                            id="horizontal-form-name"
                            aria-describedby="horizontal-form-name-helper"
                            name="horizontal-form-name"
                            onChange={(value) => { ChangeData(value, 'billno') }}
                        />
                    </FormGroup>
                </GridItem>
                <GridItem>
                    <FormGroup
                        label="Enter number of Entries"
                        type="number"
                        fieldId="ne"
                        isRequired
                    >
                        <NumberInput
                            value={numberE}
                            isDisabled={disableEntry}
                            inputName="input 1"
                            onMinus={onMinus}
                            onChange={onChange}
                            onPlus={onPlus}
                            inputAriaLabel="number input 1"
                            minusBtnAriaLabel="minus 1"
                            plusBtnAriaLabel="plus 1"
                        />
                    </FormGroup>
                </GridItem>
                <GridItem>
                    <FormGroup label="Bill Date" fieldId="horizontal-form-title">
                        <DatePicker
                            value={data.billdate}
                            placeholder="dd/MM/yyyy"
                            isDisabled={disableEntry}
                            /*isDisabled={!editrole}*/
                            onChange={(value) => { ChangeData(value, 'billdate') }}
                            dateFormat={dateFormat}
                            dateParse={dateParse}
                        />
                    </FormGroup>
                </GridItem>
            </Grid>
            <FormGroup label="Name" isRequired fieldId="horizontal-form-name" helperText="Enter Name of the Purchase">
                <TextInput
                    value={data.name}
                    isRequired
                    isDisabled={disableEntry}
                    type="text"
                    id="horizontal-form-name"
                    aria-describedby="horizontal-form-name-helper"
                    name="horizontal-form-name"
                    onChange={(value) => { ChangeData(value, 'name') }}
                />
            </FormGroup>
            <br />
            <FormGroup label="Purchase Order No" fieldId="horizontal-form-title">
                <FormSelect
                    isDisabled={!disableEntry}
                    value={pon} 
                    onChange={(value) => { setponR(value) }}
                    id="horzontal-form-title"
                    name="horizontal-form-title"
                    aria-label="Purchase Order No"
                >
                    {options.map((option, index) => (
                        <FormSelectOption isDisabled={option.disabled} key={index} value={option.value} label={option.label} />
                    ))}
                </FormSelect>
            </FormGroup>
        </Form>
    )
}



const ComponentAddition = () => {
    const [numberEntries, setnE] = useState(0);
    const [ToSendData, SetToSendData] = useState<any>([])
    var todayD = new Date();
    let billno = (Math.random() + 1).toString(36).substring(7);
    const [data, setData] = useState({ date: todayD.toLocaleDateString(), billdate: todayD.toLocaleDateString(), billno: billno, pon: '' });
    let DataToSend : Array<any> = [];
    function ModifyData(index, value){
        DataToSend = ToSendData;
        console.log(index);
        DataToSend.splice(index, 1, value);
        console.log(DataToSend);
        SetToSendData(DataToSend);
    }
    const options = [
        { value: '', label: 'Select one', disabled: false, isPlaceholder: true },
        { value: 'ORDERNO1', label: 'ORDERNO1', disabled: false },
        { value: 'ORDERNO2', label: 'ORDERNO2', disabled: false },
        { value: 'ORDERNO3', label: 'ORDERNO3', disabled: false },
    ];
    const onplus = () => {
        setnE(numberEntries + 1);

    }
    const onChange1 = event => {
        setnE(Number(event.target.value));
    };
    const onminus = () => {
        if (numberEntries <= 0) {
            setnE(0);
        }
        else {
            setnE(numberEntries - 1);
        }

    }
    const setData1 = (value) => {
        console.log(value);
        setData(value);
    }
    const steps = [
        { name: 'Supplier Details', component: <NumberEntries editrole={true} data={data} onDataSet={setData1} options={options} numberE={numberEntries} onPlus={onplus} onChange={onChange1} onMinus={onminus} /> },
        { name: 'Component Details', component: <ComponentDetails NumberEntries={numberEntries} ModifyData={ModifyData} /> },
        { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }
    ];
    const title = 'Basic wizard';

    return (
        <Wizard
            navAriaLabel={`${title} steps`}
            mainAriaLabel={`${title} content`}
            steps={steps}
            height={'90%'}
        />
    )
}

export default ComponentAddition;