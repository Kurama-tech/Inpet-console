import React, { Dispatch, SetStateAction, useContext, useEffect, useState } from 'react';

import { ActionGroup, Button, Checkbox, Grid, GridItem, DatePicker, Form, FormGroup, ValidatedOptions, FormHelperText, FormSelect, FormSelectOption, NumberInput, TextArea, TextInput, Wizard, Radio, WizardContextConsumer, WizardFooter, Alert, FormAlert, WizardHeader, Switch, getUniqueId, Spinner } from '@patternfly/react-core';
import ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';
import ComponentDetails from './ComponentDetails';
import Review from './Review';
import { Context } from "src/store/store";
import { getInventoryItems, postCallInventoryBatch } from 'src/services/APIservice';
import Finish from './Finish';

type NumberEntriesProps = {
    editrole: boolean;
    data: any;
    numberE: number;
    onPlus: () => void;
    onChange: (event: any) => void;
    onDataSet: (event: any) => void;
    onMinus: () => void;
    error: boolean;
    options: any;
    Operation: boolean;
    SetOperation: (value) => void;

};


const NumberEntries = ({Operation, SetOperation, editrole, data, numberE, options, onDataSet, onPlus, onMinus, onChange, error }: NumberEntriesProps) => {
    const onSetData = (value) => {
        onDataSet(value)
    }
    const [pon, setPon] = useState('');
    const [name, setname] = useState('');
    const [disableEntry, setDisableEntry] = useState(false);
    useEffect(()=>{
       setName(data.name ? data.name: '') 
    }, [data, setname])
    const dateFormat = date => date.toLocaleDateString();
    const dateParse = date => {
        //const split = date.split('/');
        //if (split.length !== 3) {
        //  return new Date();
        //}
        //let month = split[0];
        //let day = split[1];
        //let year = split[2];
        //console.log(split);
        return date;
        //return new Date(`${day.padStart(2, '0')}-${month.padStart(2, '0')}-${year.padStart(4, '0')}T00:00:00`);
    };

    const ChangeData = (value, key) => {
        var temp = data;
        
        temp[key] = value;
        onSetData(temp);
    }
    const setName = (value) => {
        var temp = data;
        data['name'] = value;
        temp['name'] = value;
        setname(value);
    }
    const setponR = (value) => {
        var temp = data;
        temp['pon'] = value;
        setPon(value);
        onSetData(temp);
        console.log(data);
    }
    const setPON = (value) =>{
        if(value === false){
            setDisableEntry(value);
            setponR('');
        }
        else{
            setDisableEntry(value); 
        }
        
    }
    return (
        <React.Fragment>
        <Form>
        {(error) && (
                        <FormAlert>
                            <Alert
                                variant="danger"
                                title="Missing Required Feilds"
                                aria-live="polite"
                                isInline
                            />
                        </FormAlert>
                    )}
            <Checkbox id="check-9"
                isChecked={disableEntry}
                label="Via Purchase order"
                aria-label="Via Purchase order"
                onChange={(checked)=>setPON(checked)}
                description="Check here if you have a Purchase Order Number" />
            <Grid hasGutter md={6}>
                <GridItem>
                    <FormGroup label="Date" fieldId="horizontal-form-title">
                        <DatePicker
                            value={data.date}
                            placeholder="dd/MM/yyyy"
                            isDisabled={!editrole || disableEntry}
                            onChange={(value) => { ChangeData(value, 'date') }}
                            dateFormat={dateFormat}
                            dateParse={dateParse}
                        />
                    </FormGroup>
                </GridItem>
                <GridItem>
                    <FormGroup label="Bill No" fieldId="horizontal-form-title" helperText="AutoGenerated Bill No">
                        <TextInput
                            value={data.billno}
                            isRequired
                            isDisabled={false}
                            type="text"
                            id="horizontal-form-name"
                            aria-describedby="horizontal-form-name-helper"
                            name="horizontal-form-name"
                            onChange={(value) => { ChangeData(value, 'billno') }}
                        />
                    </FormGroup>
                </GridItem>
                <GridItem>
                    <FormGroup
                        label="Enter number of Entries"
                        type="number"
                        fieldId="ne"
                        isRequired
                    >
                        <NumberInput
                            value={numberE}
                            isDisabled={disableEntry}
                            inputName="input 1"
                            onMinus={onMinus}
                            onChange={onChange}
                            onPlus={onPlus}
                            inputAriaLabel="number input 1"
                            minusBtnAriaLabel="minus 1"
                            plusBtnAriaLabel="plus 1"
                        />
                    </FormGroup>
                </GridItem>
                <GridItem>
                    <FormGroup label="Bill Date" fieldId="horizontal-form-title">
                        <DatePicker
                            value={data.billdate}
                            placeholder="dd/MM/yyyy"
                            isDisabled={disableEntry}
                            /*isDisabled={!editrole}*/
                            onChange={(value) => { ChangeData(value, 'billdate') }}
                            dateFormat={dateFormat}
                            dateParse={dateParse}
                        />
                    </FormGroup>
                </GridItem>
            </Grid>
            <FormGroup label="Recieved/Issued" isRequired isInline fieldId="select-operation">
            <Switch
                id="simple-switch"
                label="Recived"
                labelOff="Issued"
                isChecked={Operation}
                onChange={SetOperation}
            />
            </FormGroup>
            <FormGroup label="Supplier Name" isRequired fieldId="horizontal-form-name" helperText="Enter Name of the Supplier">
                <TextInput
                    value={name}
                    isRequired
                    isDisabled={disableEntry}
                    type="text"
                    id="horizontal-form-name"
                    aria-describedby="horizontal-form-name-helper"
                    name="horizontal-form-name"
                    onChange={(value) => { setName(value) }}
                />
            </FormGroup>
            <br />
            <FormGroup label="Purchase Order No" fieldId="horizontal-form-title">
                <FormSelect
                    isDisabled={!disableEntry}
                    value={pon} 
                    onChange={(value) => { setponR(value) }}
                    id="horzontal-form-title"
                    name="horizontal-form-title"
                    aria-label="Purchase Order No"
                >
                    {options.map((option, index) => (
                        <FormSelectOption isDisabled={option.disabled} key={index} value={option.value} label={option.label} />
                    ))}
                </FormSelect>
            </FormGroup>
        </Form>
        </React.Fragment>
    )
}



const ComponentAddition = () => {
    const [numberEntries, setnE] = useState(0);
    const [Progress, setProgress] = useState(false);
    const {state, dispatch} = useContext(Context)
    const [ToSendData, SetToSendData] = useState<any>([])
    const [ReviewedAPID, setReviewAPID] = useState<any>([])
    const [Operation, SetOperation] = useState(true);
    const onOperationChange = (value) => {
        SetOperation(value)
    }
    const [error, setError] = useState(false);
    var todayD = new Date();
    type ArrayType = {
        Category: String;
        Comments: String;
        Description: String;
        Make: String;
        Package: String;
        PartNo: String;
        Quantity: String;
        SubCat: String;
        Termination: String;
        Value: String;
    }
    let billno = (Math.random() + 1).toString(36).substring(7);
    const [data, setData] = useState({ date: todayD.toLocaleDateString(), billdate: todayD.toLocaleDateString(), billno: billno, pon: '' , name: ''});
    let DataToSend : Array<ArrayType> = [];
    function ModifyData(index, value){
        DataToSend = ToSendData;
        console.log(index);
        DataToSend.splice(index, 1, value);
        console.log(DataToSend);
        SetToSendData(DataToSend);
    }
    const options = [
        { value: '', label: 'Select one', disabled: false, isPlaceholder: true },
        { value: 'ORDERNO1', label: 'ORDERNO1', disabled: false },
        { value: 'ORDERNO2', label: 'ORDERNO2', disabled: false },
        { value: 'ORDERNO3', label: 'ORDERNO3', disabled: false },
    ];
    const onplus = () => {
        setnE(numberEntries + 1);

    }
    const onChange1 = event => {
        setnE(Number(event.target.value));
    };
    const onminus = () => {
        if (numberEntries <= 0) {
            setnE(0);
        }
        else {
            setnE(numberEntries - 1);
        }

    }
    const setData1 = (value) => {
        console.log(value);
        setData(value);
    }
    const steps = [
        { name: 'Bill Details', component: <NumberEntries Operation={Operation} SetOperation={onOperationChange}  editrole={false} error={error} data={data} onDataSet={setData1} options={options} numberE={numberEntries} onPlus={onplus} onChange={onChange1} onMinus={onminus} /> },
        { name: 'Component Details', component: <ComponentDetails Operation={Operation} SetOperation={onOperationChange} ToSendData={ToSendData} error={error} NumberEntries={numberEntries} ModifyData={ModifyData} /> },
        { name: 'Review', component: <Review data={data} ToSendData={ToSendData} setReviewAPID={setReviewAPID} Operation={Operation} NumberEntries={numberEntries} /> , nextButtonText: 'Finish' },
        {name: 'Finished', component: <Finish/>, isFinishedStep: true}
    ];
    function ValidateFirstStep(onNext){
        if(data.billdate === '' || data.billno === '' || data.name === '' || numberEntries <= 0 ){
            //set Validation Error Here
            setError(true);
        }
        else{
            setError(false);
            onNext();
        }
    }
    async function InsertintoInv(data=ReviewedAPID, onNext){
        await postCallInventoryBatch(data).then((res) => {
            setProgress(true);
            if (res.code === 200) {
                const successAlert = {
                    title: "["+ res.code + "] Add Inventory Success!",
                    details: res.data.toString(),
                    key: getUniqueId(),
                    variant: "success"
                }
                dispatch({type: "ADD_Alert", data: successAlert});
                getInventoryItems()
                setProgress(false);
                onNext();
                // setisModalOpen(false)
            } else {
                setProgress(false);
                // setisModalOpen(false);
                const errorAlert = {
                    title: "["+ res.code + "] Add Inventory Error!",
                    details: res.data.toString(),
                    key: getUniqueId(),
                    variant: "danger"
                }
                dispatch({type: "ADD_Alert", data: errorAlert});
            }
        });
    }
    function ValidateSecond(onNext){
            var count = 0;
            var flag = false;
            var length = 0;
            if(ToSendData.length === 0){
                setError(true);
            }
            else{
                ToSendData.forEach(function (el) {
                    length = length + Object.keys(el).length
                    Object.keys(el).forEach(function (property) {
                        console.log(property)
                      if (el[property] === '') {
                        setError(true);
                        flag = true
                      }
                      else{
                        setError(false);
                        count = count + 1
                        flag = false
                      }
                    });
                  });
                  console.log(count);
                if(!flag && count === length){
                    onNext();
                }
            }    
    }
    const title = 'Basic wizard';
    const CustomFooter = (
        <WizardFooter>
          <WizardContextConsumer>
            {({ activeStep, goToStepByName, goToStepById, onNext, onBack, onClose }) => {
              
              if (activeStep.name !== 'Review' && activeStep.name === 'Component Details') {
                return (
                  <>
                    <Button variant="primary" type="submit" onClick={()=> {ValidateSecond(onNext)}}>
                      Validate and Proceed
                    </Button>
                    <Button variant="secondary" onClick={onBack} className={activeStep.name === 'Step 1' ? 'pf-m-disabled' : ''}>
                      Back
                    </Button>
                    <Button variant="link" onClick={onClose}>
                      Cancel
                    </Button>
                  </>
                )
              }
              else if( activeStep.name === 'Bill Details'){
                return (
                    <>
                      <Button variant="primary" type="submit" onClick={()=> {ValidateFirstStep(onNext)}}>
                        Proceed
                      </Button>
                      <Button variant="secondary" onClick={onBack} className={activeStep.name === 'Bill Details' ? 'pf-m-disabled' : ''}>
                        Back
                      </Button>
                      <Button variant="link" onClick={onClose}>
                        Cancel
                      </Button>
                    </>
                  )
              }
              // Final step buttons
              return (
                <>
                  <Button variant="primary" type="submit" onClick={() => InsertintoInv(ReviewedAPID, onNext)}>Submit</Button>
                  <Button variant="secondary" onClick={onBack} className={activeStep.name === 'Bill Details' ? 'pf-m-disabled' : ''}>
                        Back
                  </Button>
                  <Button onClick={() => goToStepByName('Bill Details')}>Go to Beginning</Button>
                </>
              )}}
          </WizardContextConsumer>
        </WizardFooter>
      );

    return (
        <React.Fragment>
        <Wizard
            
            navAriaLabel={`${title} steps`}
            mainAriaLabel={`${title} content`}
            steps={steps}
            footer={CustomFooter}
            height={'90%'}
        >{Progress &&(
            <Spinner isSVG diameter="80px" />
        )}
            </Wizard></React.Fragment>
    )
}

export default ComponentAddition;